{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\PF - Romeo\\\\src\\\\Components\\\\ItemListContainer\\\\ItemListContainer.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFirestore, collection, getDocs, where, query } from 'firebase/firestore';\nimport ItemList from '../ItemList/ItemList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemListContainer = () => {\n  _s();\n  const [items, setItems] = useState([]);\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const db = getFirestore();\n        const itemsCollection = collection(db, 'productos');\n        let itemsQuery;\n        if (id) {\n          // Si hay una categoría, filtramos por ella\n          itemsQuery = query(itemsCollection, where('categoryId', '==', id));\n        } else {\n          // Si no hay categoría, traemos todos los productos\n          itemsQuery = itemsCollection;\n        }\n        const querySnapshot = await getDocs(itemsQuery);\n        if (querySnapshot.empty) {\n          console.log('No se encontraron productos');\n        } else {\n          setItems(querySnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          })));\n        }\n      } catch (error) {\n        console.error('Error al obtener productos:', error);\n      }\n    };\n    fetchData();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(ItemList, {\n        items: items\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ItemListContainer, \"apfO63jzZk6cE81KzdSe9Mz3vw8=\", false, function () {\n  return [useParams];\n});\n_c = ItemListContainer;\nexport default ItemListContainer;\nvar _c;\n$RefreshReg$(_c, \"ItemListContainer\");","map":{"version":3,"names":["useState","useEffect","useParams","getFirestore","collection","getDocs","where","query","ItemList","jsxDEV","_jsxDEV","ItemListContainer","_s","items","setItems","id","fetchData","db","itemsCollection","itemsQuery","querySnapshot","empty","console","log","docs","map","doc","data","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/PF - Romeo/src/Components/ItemListContainer/ItemListContainer.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { getFirestore, collection, getDocs, where, query } from 'firebase/firestore';\r\nimport ItemList from '../ItemList/ItemList';\r\n\r\nconst ItemListContainer = () => {\r\n  const [items, setItems] = useState([]);\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const db = getFirestore();\r\n        const itemsCollection = collection(db, 'productos');\r\n        let itemsQuery;\r\n\r\n        if (id) {\r\n          // Si hay una categoría, filtramos por ella\r\n          itemsQuery = query(itemsCollection, where('categoryId', '==', id));\r\n        } else {\r\n          // Si no hay categoría, traemos todos los productos\r\n          itemsQuery = itemsCollection;\r\n        }\r\n\r\n        const querySnapshot = await getDocs(itemsQuery);\r\n\r\n        if (querySnapshot.empty) {\r\n          console.log('No se encontraron productos');\r\n        } else {\r\n          setItems(querySnapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() })));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al obtener productos:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [id]);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <ItemList items={items} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemListContainer;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,YAAY,EAAEC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AACpF,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM;IAAEe;EAAG,CAAC,GAAGb,SAAS,CAAC,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,EAAE,GAAGd,YAAY,CAAC,CAAC;QACzB,MAAMe,eAAe,GAAGd,UAAU,CAACa,EAAE,EAAE,WAAW,CAAC;QACnD,IAAIE,UAAU;QAEd,IAAIJ,EAAE,EAAE;UACN;UACAI,UAAU,GAAGZ,KAAK,CAACW,eAAe,EAAEZ,KAAK,CAAC,YAAY,EAAE,IAAI,EAAES,EAAE,CAAC,CAAC;QACpE,CAAC,MAAM;UACL;UACAI,UAAU,GAAGD,eAAe;QAC9B;QAEA,MAAME,aAAa,GAAG,MAAMf,OAAO,CAACc,UAAU,CAAC;QAE/C,IAAIC,aAAa,CAACC,KAAK,EAAE;UACvBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC5C,CAAC,MAAM;UACLT,QAAQ,CAACM,aAAa,CAACI,IAAI,CAACC,GAAG,CAAEC,GAAG,KAAM;YAAEX,EAAE,EAAEW,GAAG,CAACX,EAAE;YAAE,GAAGW,GAAG,CAACC,IAAI,CAAC;UAAE,CAAC,CAAC,CAAC,CAAC;QAC5E;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDZ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACD,EAAE,CAAC,CAAC;EAER,oBACEL,OAAA;IAAKmB,SAAS,EAAC,WAAW;IAAAC,QAAA,eACxBpB,OAAA;MAAKmB,SAAS,EAAC,KAAK;MAAAC,QAAA,eAClBpB,OAAA,CAACF,QAAQ;QAACK,KAAK,EAAEA;MAAM;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtB,EAAA,CAzCID,iBAAiB;EAAA,QAENT,SAAS;AAAA;AAAAiC,EAAA,GAFpBxB,iBAAiB;AA2CvB,eAAeA,iBAAiB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}